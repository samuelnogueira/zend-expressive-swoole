#!/usr/bin/env php
<?php

use SebastianBergmann\CodeCoverage\CodeCoverage;
use Zend\Expressive\Application;

require $argv[1] ?? 'vendor/autoload.php';

/**
 * Self-called anonymous function that creates its own scope and keep the global namespace clean.
 */
call_user_func(function () use ($argv) {
    // this is used to collect code coverage during tests
    // this second argument shouldn't ever be passed in production environment
    if (!empty($argv[2])) {
        $coverage = new CodeCoverage();
        $coverage->filter()->addDirectoryToWhitelist(dirname(__DIR__) . DIRECTORY_SEPARATOR . 'src');
        $coverage->start('<zend-expressive-swoole Test Suite>');
    }

    /** @var \Psr\Container\ContainerInterface $container */
    $container = require 'config/container.php';

    // $app is used in pipeline.php and routes.php
    $app = $container->get(Application::class);

    // Import programmatic/declarative middleware pipeline and routing
    // configuration statements
    file_exists('config/pipeline.php') and require 'config/pipeline.php';
    file_exists('config/routes.php') and require 'config/routes.php';

    /** @var \Swoole\Http\Server $server */
    $server = $container->get('Swoole\Http\Server');

    // if we are in collect code coverage mode, store results on worker shutdown
    if (isset($coverage)) {
        $server->on('WorkerStop', function () use ($coverage, $argv) {
            $coverage->stop();
            $writer = new \SebastianBergmann\CodeCoverage\Report\Clover;
            $writer->process($coverage, $argv[2]);
        });
    }

    $server->start();
});
